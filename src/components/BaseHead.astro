---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "@/styles/globals.css"

interface Props {
  title: string
  description: string
  image?: string
}

import SpeedInsights from "@vercel/speed-insights/astro"

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image = "/blog-placeholder-1.jpg" } = Astro.props

import { STORAGE_THEME_KEY, THEME_MAP } from "@/stores/theme"
import { ClientRouter } from "astro:transitions"

import "@fontsource/inter/100.css"
import "@fontsource/inter/200.css"
import "@fontsource/inter/300.css"
import "@fontsource/inter/400.css"
import "@fontsource/inter/500.css"
import "@fontsource/inter/600.css"
import "@fontsource/inter/700.css"
import "@fontsource/inter/800.css"
import "@fontsource/inter/900.css"
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Vercel Speed Insights -->
<SpeedInsights />

<!-- View Transition -->
<ClientRouter />

<!-- Theme -->
<script is:inline define:vars={{ STORAGE_THEME_KEY, THEME_MAP }}>
  function setDarkMode(document) {
    const userTheme = localStorage.getItem(STORAGE_THEME_KEY)

    if (
      userTheme === THEME_MAP.dark ||
      (!userTheme && window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      document.documentElement.classList.add("dark")
    }
  }

  setDarkMode(document)

  document.addEventListener("astro:before-swap", (ev) => {
    // Pass the incoming document to set the theme on it
    setDarkMode(ev.newDocument)
  })
</script>
